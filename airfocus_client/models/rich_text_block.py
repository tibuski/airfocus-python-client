# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from airfocus_client.models.rich_text_block_attachment import RichTextBlockAttachment
from airfocus_client.models.rich_text_block_blockquote import RichTextBlockBlockquote
from airfocus_client.models.rich_text_block_code import RichTextBlockCode
from airfocus_client.models.rich_text_block_custom import RichTextBlockCustom
from airfocus_client.models.rich_text_block_embed import RichTextBlockEmbed
from airfocus_client.models.rich_text_block_headline import RichTextBlockHeadline
from airfocus_client.models.rich_text_block_paragraph import RichTextBlockParagraph
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

RICHTEXTBLOCK_ONE_OF_SCHEMAS = ["RichTextBlockAttachment", "RichTextBlockBlockquote", "RichTextBlockCode", "RichTextBlockCustom", "RichTextBlockEmbed", "RichTextBlockHeadline", "RichTextBlockIndentation", "RichTextBlockList", "RichTextBlockPanel", "RichTextBlockParagraph"]

class RichTextBlock(BaseModel):
    """
    RichTextBlock
    """
    # data type: RichTextBlockAttachment
    oneof_schema_1_validator: Optional[RichTextBlockAttachment] = None
    # data type: RichTextBlockBlockquote
    oneof_schema_2_validator: Optional[RichTextBlockBlockquote] = None
    # data type: RichTextBlockCode
    oneof_schema_3_validator: Optional[RichTextBlockCode] = None
    # data type: RichTextBlockCustom
    oneof_schema_4_validator: Optional[RichTextBlockCustom] = None
    # data type: RichTextBlockEmbed
    oneof_schema_5_validator: Optional[RichTextBlockEmbed] = None
    # data type: RichTextBlockHeadline
    oneof_schema_6_validator: Optional[RichTextBlockHeadline] = None
    # data type: RichTextBlockIndentation
    oneof_schema_7_validator: Optional[RichTextBlockIndentation] = None
    # data type: RichTextBlockList
    oneof_schema_8_validator: Optional[RichTextBlockList] = None
    # data type: RichTextBlockPanel
    oneof_schema_9_validator: Optional[RichTextBlockPanel] = None
    # data type: RichTextBlockParagraph
    oneof_schema_10_validator: Optional[RichTextBlockParagraph] = None
    actual_instance: Optional[Union[RichTextBlockAttachment, RichTextBlockBlockquote, RichTextBlockCode, RichTextBlockCustom, RichTextBlockEmbed, RichTextBlockHeadline, RichTextBlockIndentation, RichTextBlockList, RichTextBlockPanel, RichTextBlockParagraph]] = None
    one_of_schemas: Set[str] = { "RichTextBlockAttachment", "RichTextBlockBlockquote", "RichTextBlockCode", "RichTextBlockCustom", "RichTextBlockEmbed", "RichTextBlockHeadline", "RichTextBlockIndentation", "RichTextBlockList", "RichTextBlockPanel", "RichTextBlockParagraph" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = RichTextBlock.model_construct()
        error_messages = []
        match = 0
        # validate data type: RichTextBlockAttachment
        if not isinstance(v, RichTextBlockAttachment):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextBlockAttachment`")
        else:
            match += 1
        # validate data type: RichTextBlockBlockquote
        if not isinstance(v, RichTextBlockBlockquote):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextBlockBlockquote`")
        else:
            match += 1
        # validate data type: RichTextBlockCode
        if not isinstance(v, RichTextBlockCode):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextBlockCode`")
        else:
            match += 1
        # validate data type: RichTextBlockCustom
        if not isinstance(v, RichTextBlockCustom):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextBlockCustom`")
        else:
            match += 1
        # validate data type: RichTextBlockEmbed
        if not isinstance(v, RichTextBlockEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextBlockEmbed`")
        else:
            match += 1
        # validate data type: RichTextBlockHeadline
        if not isinstance(v, RichTextBlockHeadline):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextBlockHeadline`")
        else:
            match += 1
        # validate data type: RichTextBlockIndentation
        if not isinstance(v, RichTextBlockIndentation):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextBlockIndentation`")
        else:
            match += 1
        # validate data type: RichTextBlockList
        if not isinstance(v, RichTextBlockList):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextBlockList`")
        else:
            match += 1
        # validate data type: RichTextBlockPanel
        if not isinstance(v, RichTextBlockPanel):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextBlockPanel`")
        else:
            match += 1
        # validate data type: RichTextBlockParagraph
        if not isinstance(v, RichTextBlockParagraph):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextBlockParagraph`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in RichTextBlock with oneOf schemas: RichTextBlockAttachment, RichTextBlockBlockquote, RichTextBlockCode, RichTextBlockCustom, RichTextBlockEmbed, RichTextBlockHeadline, RichTextBlockIndentation, RichTextBlockList, RichTextBlockPanel, RichTextBlockParagraph. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in RichTextBlock with oneOf schemas: RichTextBlockAttachment, RichTextBlockBlockquote, RichTextBlockCode, RichTextBlockCustom, RichTextBlockEmbed, RichTextBlockHeadline, RichTextBlockIndentation, RichTextBlockList, RichTextBlockPanel, RichTextBlockParagraph. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into RichTextBlockAttachment
        try:
            instance.actual_instance = RichTextBlockAttachment.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextBlockBlockquote
        try:
            instance.actual_instance = RichTextBlockBlockquote.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextBlockCode
        try:
            instance.actual_instance = RichTextBlockCode.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextBlockCustom
        try:
            instance.actual_instance = RichTextBlockCustom.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextBlockEmbed
        try:
            instance.actual_instance = RichTextBlockEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextBlockHeadline
        try:
            instance.actual_instance = RichTextBlockHeadline.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextBlockIndentation
        try:
            instance.actual_instance = RichTextBlockIndentation.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextBlockList
        try:
            instance.actual_instance = RichTextBlockList.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextBlockPanel
        try:
            instance.actual_instance = RichTextBlockPanel.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextBlockParagraph
        try:
            instance.actual_instance = RichTextBlockParagraph.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into RichTextBlock with oneOf schemas: RichTextBlockAttachment, RichTextBlockBlockquote, RichTextBlockCode, RichTextBlockCustom, RichTextBlockEmbed, RichTextBlockHeadline, RichTextBlockIndentation, RichTextBlockList, RichTextBlockPanel, RichTextBlockParagraph. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into RichTextBlock with oneOf schemas: RichTextBlockAttachment, RichTextBlockBlockquote, RichTextBlockCode, RichTextBlockCustom, RichTextBlockEmbed, RichTextBlockHeadline, RichTextBlockIndentation, RichTextBlockList, RichTextBlockPanel, RichTextBlockParagraph. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], RichTextBlockAttachment, RichTextBlockBlockquote, RichTextBlockCode, RichTextBlockCustom, RichTextBlockEmbed, RichTextBlockHeadline, RichTextBlockIndentation, RichTextBlockList, RichTextBlockPanel, RichTextBlockParagraph]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

from airfocus_client.models.rich_text_block_indentation import RichTextBlockIndentation
from airfocus_client.models.rich_text_block_list import RichTextBlockList
from airfocus_client.models.rich_text_block_panel import RichTextBlockPanel
# TODO: Rewrite to not use raise_errors
RichTextBlock.model_rebuild(raise_errors=False)

