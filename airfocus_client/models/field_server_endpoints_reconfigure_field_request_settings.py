# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from airfocus_client.models.form_source_field_type_settings import FormSourceFieldTypeSettings
from airfocus_client.models.insights_field_type_settings import InsightsFieldTypeSettings
from airfocus_client.models.number_field_type_settings import NumberFieldTypeSettings
from airfocus_client.models.okr_confidence_field_settings import OkrConfidenceFieldSettings
from airfocus_client.models.okr_time_period_field_settings import OkrTimePeriodFieldSettings
from airfocus_client.models.people_field_type_settings import PeopleFieldTypeSettings
from airfocus_client.models.select_field_type_settings import SelectFieldTypeSettings
from airfocus_client.models.time_period_field_settings import TimePeriodFieldSettings
from airfocus_client.models.voting_app_score_field_type_settings import VotingAppScoreFieldTypeSettings
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

FIELDSERVERENDPOINTSRECONFIGUREFIELDREQUESTSETTINGS_ONE_OF_SCHEMAS = ["FormSourceFieldTypeSettings", "InsightsFieldTypeSettings", "NumberFieldTypeSettings", "OkrConfidenceFieldSettings", "OkrTimePeriodFieldSettings", "PeopleFieldTypeSettings", "SelectFieldTypeSettings", "TimePeriodFieldSettings", "VotingAppScoreFieldTypeSettings"]

class FieldServerEndpointsReconfigureFieldRequestSettings(BaseModel):
    """
    The settings object which corresponds to the type of the requested field, or it can be skipped if the requested field does not have any settings. This schema shows all the available field-settings. See also the Field schema to learn about settings of each specific field type.
    """
    # data type: FormSourceFieldTypeSettings
    oneof_schema_1_validator: Optional[FormSourceFieldTypeSettings] = None
    # data type: InsightsFieldTypeSettings
    oneof_schema_2_validator: Optional[InsightsFieldTypeSettings] = None
    # data type: NumberFieldTypeSettings
    oneof_schema_3_validator: Optional[NumberFieldTypeSettings] = None
    # data type: OkrConfidenceFieldSettings
    oneof_schema_4_validator: Optional[OkrConfidenceFieldSettings] = None
    # data type: OkrTimePeriodFieldSettings
    oneof_schema_5_validator: Optional[OkrTimePeriodFieldSettings] = None
    # data type: PeopleFieldTypeSettings
    oneof_schema_6_validator: Optional[PeopleFieldTypeSettings] = None
    # data type: SelectFieldTypeSettings
    oneof_schema_7_validator: Optional[SelectFieldTypeSettings] = None
    # data type: TimePeriodFieldSettings
    oneof_schema_8_validator: Optional[TimePeriodFieldSettings] = None
    # data type: VotingAppScoreFieldTypeSettings
    oneof_schema_9_validator: Optional[VotingAppScoreFieldTypeSettings] = None
    actual_instance: Optional[Union[FormSourceFieldTypeSettings, InsightsFieldTypeSettings, NumberFieldTypeSettings, OkrConfidenceFieldSettings, OkrTimePeriodFieldSettings, PeopleFieldTypeSettings, SelectFieldTypeSettings, TimePeriodFieldSettings, VotingAppScoreFieldTypeSettings]] = None
    one_of_schemas: Set[str] = { "FormSourceFieldTypeSettings", "InsightsFieldTypeSettings", "NumberFieldTypeSettings", "OkrConfidenceFieldSettings", "OkrTimePeriodFieldSettings", "PeopleFieldTypeSettings", "SelectFieldTypeSettings", "TimePeriodFieldSettings", "VotingAppScoreFieldTypeSettings" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = FieldServerEndpointsReconfigureFieldRequestSettings.model_construct()
        error_messages = []
        match = 0
        # validate data type: FormSourceFieldTypeSettings
        if not isinstance(v, FormSourceFieldTypeSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FormSourceFieldTypeSettings`")
        else:
            match += 1
        # validate data type: InsightsFieldTypeSettings
        if not isinstance(v, InsightsFieldTypeSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InsightsFieldTypeSettings`")
        else:
            match += 1
        # validate data type: NumberFieldTypeSettings
        if not isinstance(v, NumberFieldTypeSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NumberFieldTypeSettings`")
        else:
            match += 1
        # validate data type: OkrConfidenceFieldSettings
        if not isinstance(v, OkrConfidenceFieldSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OkrConfidenceFieldSettings`")
        else:
            match += 1
        # validate data type: OkrTimePeriodFieldSettings
        if not isinstance(v, OkrTimePeriodFieldSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OkrTimePeriodFieldSettings`")
        else:
            match += 1
        # validate data type: PeopleFieldTypeSettings
        if not isinstance(v, PeopleFieldTypeSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PeopleFieldTypeSettings`")
        else:
            match += 1
        # validate data type: SelectFieldTypeSettings
        if not isinstance(v, SelectFieldTypeSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SelectFieldTypeSettings`")
        else:
            match += 1
        # validate data type: TimePeriodFieldSettings
        if not isinstance(v, TimePeriodFieldSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimePeriodFieldSettings`")
        else:
            match += 1
        # validate data type: VotingAppScoreFieldTypeSettings
        if not isinstance(v, VotingAppScoreFieldTypeSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VotingAppScoreFieldTypeSettings`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in FieldServerEndpointsReconfigureFieldRequestSettings with oneOf schemas: FormSourceFieldTypeSettings, InsightsFieldTypeSettings, NumberFieldTypeSettings, OkrConfidenceFieldSettings, OkrTimePeriodFieldSettings, PeopleFieldTypeSettings, SelectFieldTypeSettings, TimePeriodFieldSettings, VotingAppScoreFieldTypeSettings. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in FieldServerEndpointsReconfigureFieldRequestSettings with oneOf schemas: FormSourceFieldTypeSettings, InsightsFieldTypeSettings, NumberFieldTypeSettings, OkrConfidenceFieldSettings, OkrTimePeriodFieldSettings, PeopleFieldTypeSettings, SelectFieldTypeSettings, TimePeriodFieldSettings, VotingAppScoreFieldTypeSettings. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into FormSourceFieldTypeSettings
        try:
            instance.actual_instance = FormSourceFieldTypeSettings.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InsightsFieldTypeSettings
        try:
            instance.actual_instance = InsightsFieldTypeSettings.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NumberFieldTypeSettings
        try:
            instance.actual_instance = NumberFieldTypeSettings.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OkrConfidenceFieldSettings
        try:
            instance.actual_instance = OkrConfidenceFieldSettings.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OkrTimePeriodFieldSettings
        try:
            instance.actual_instance = OkrTimePeriodFieldSettings.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PeopleFieldTypeSettings
        try:
            instance.actual_instance = PeopleFieldTypeSettings.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SelectFieldTypeSettings
        try:
            instance.actual_instance = SelectFieldTypeSettings.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TimePeriodFieldSettings
        try:
            instance.actual_instance = TimePeriodFieldSettings.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VotingAppScoreFieldTypeSettings
        try:
            instance.actual_instance = VotingAppScoreFieldTypeSettings.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into FieldServerEndpointsReconfigureFieldRequestSettings with oneOf schemas: FormSourceFieldTypeSettings, InsightsFieldTypeSettings, NumberFieldTypeSettings, OkrConfidenceFieldSettings, OkrTimePeriodFieldSettings, PeopleFieldTypeSettings, SelectFieldTypeSettings, TimePeriodFieldSettings, VotingAppScoreFieldTypeSettings. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into FieldServerEndpointsReconfigureFieldRequestSettings with oneOf schemas: FormSourceFieldTypeSettings, InsightsFieldTypeSettings, NumberFieldTypeSettings, OkrConfidenceFieldSettings, OkrTimePeriodFieldSettings, PeopleFieldTypeSettings, SelectFieldTypeSettings, TimePeriodFieldSettings, VotingAppScoreFieldTypeSettings. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], FormSourceFieldTypeSettings, InsightsFieldTypeSettings, NumberFieldTypeSettings, OkrConfidenceFieldSettings, OkrTimePeriodFieldSettings, PeopleFieldTypeSettings, SelectFieldTypeSettings, TimePeriodFieldSettings, VotingAppScoreFieldTypeSettings]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


