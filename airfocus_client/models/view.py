# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from airfocus_client.models.item_search_query_filter import ItemSearchQueryFilter
from airfocus_client.models.item_search_query_sort import ItemSearchQuerySort
from airfocus_client.models.permission import Permission
from typing import Optional, Set
from typing_extensions import Self

class View(BaseModel):
    """
    View
    """ # noqa: E501
    description: StrictStr
    id: StrictStr
    name: StrictStr
    order: StrictInt
    settings: Optional[Any]
    type_id: StrictStr = Field(alias="typeId")
    workspace_id: StrictStr = Field(alias="workspaceId")
    item_filter: Optional[ItemSearchQueryFilter] = Field(default=None, alias="itemFilter")
    item_sort: Optional[List[ItemSearchQuerySort]] = Field(default=None, alias="itemSort")
    pinned_to_position: Optional[StrictInt] = Field(default=None, alias="pinnedToPosition")
    private_owner_id: Optional[StrictStr] = Field(default=None, alias="privateOwnerId")
    required_permission: Optional[Permission] = Field(default=None, alias="requiredPermission")
    __properties: ClassVar[List[str]] = ["description", "id", "name", "order", "settings", "typeId", "workspaceId", "itemFilter", "itemSort", "pinnedToPosition", "privateOwnerId", "requiredPermission"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of View from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of item_filter
        if self.item_filter:
            _dict['itemFilter'] = self.item_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in item_sort (list)
        _items = []
        if self.item_sort:
            for _item_item_sort in self.item_sort:
                if _item_item_sort:
                    _items.append(_item_item_sort.to_dict())
            _dict['itemSort'] = _items
        # set to None if settings (nullable) is None
        # and model_fields_set contains the field
        if self.settings is None and "settings" in self.model_fields_set:
            _dict['settings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of View from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "order": obj.get("order"),
            "settings": obj.get("settings"),
            "typeId": obj.get("typeId"),
            "workspaceId": obj.get("workspaceId"),
            "itemFilter": ItemSearchQueryFilter.from_dict(obj["itemFilter"]) if obj.get("itemFilter") is not None else None,
            "itemSort": [ItemSearchQuerySort.from_dict(_item) for _item in obj["itemSort"]] if obj.get("itemSort") is not None else None,
            "pinnedToPosition": obj.get("pinnedToPosition"),
            "privateOwnerId": obj.get("privateOwnerId"),
            "requiredPermission": obj.get("requiredPermission")
        })
        return _obj


