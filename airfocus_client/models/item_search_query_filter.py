# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, Dict, List, Optional
from airfocus_client.models.item_search_query_filter_assignees import ItemSearchQueryFilterAssignees
from airfocus_client.models.item_search_query_filter_created_at import ItemSearchQueryFilterCreatedAt
from airfocus_client.models.item_search_query_filter_field_value import ItemSearchQueryFilterFieldValue
from airfocus_client.models.item_search_query_filter_integration import ItemSearchQueryFilterIntegration
from airfocus_client.models.item_search_query_filter_last_updated_at import ItemSearchQueryFilterLastUpdatedAt
from airfocus_client.models.item_search_query_filter_name import ItemSearchQueryFilterName
from airfocus_client.models.item_search_query_filter_parent import ItemSearchQueryFilterParent
from airfocus_client.models.item_search_query_filter_status import ItemSearchQueryFilterStatus
from airfocus_client.models.item_search_query_filter_status_category import ItemSearchQueryFilterStatusCategory
from airfocus_client.models.item_search_query_filter_updated_since import ItemSearchQueryFilterUpdatedSince
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ITEMSEARCHQUERYFILTER_ONE_OF_SCHEMAS = ["ItemSearchQueryFilterAnd", "ItemSearchQueryFilterAssignees", "ItemSearchQueryFilterCreatedAt", "ItemSearchQueryFilterFieldValue", "ItemSearchQueryFilterIntegration", "ItemSearchQueryFilterLastUpdatedAt", "ItemSearchQueryFilterName", "ItemSearchQueryFilterNot", "ItemSearchQueryFilterOr", "ItemSearchQueryFilterParent", "ItemSearchQueryFilterStatus", "ItemSearchQueryFilterStatusCategory", "ItemSearchQueryFilterUpdatedSince", "object"]

class ItemSearchQueryFilter(BaseModel):
    """
    ItemSearchQueryFilter
    """
    # data type: ItemSearchQueryFilterAnd
    oneof_schema_1_validator: Optional[ItemSearchQueryFilterAnd] = None
    # data type: ItemSearchQueryFilterAssignees
    oneof_schema_2_validator: Optional[ItemSearchQueryFilterAssignees] = None
    # data type: ItemSearchQueryFilterCreatedAt
    oneof_schema_3_validator: Optional[ItemSearchQueryFilterCreatedAt] = None
    # data type: ItemSearchQueryFilterFieldValue
    oneof_schema_4_validator: Optional[ItemSearchQueryFilterFieldValue] = None
    # data type: ItemSearchQueryFilterIntegration
    oneof_schema_5_validator: Optional[ItemSearchQueryFilterIntegration] = None
    # data type: object
    oneof_schema_6_validator: Optional[Dict[str, Any]] = None
    # data type: ItemSearchQueryFilterLastUpdatedAt
    oneof_schema_7_validator: Optional[ItemSearchQueryFilterLastUpdatedAt] = None
    # data type: ItemSearchQueryFilterName
    oneof_schema_8_validator: Optional[ItemSearchQueryFilterName] = None
    # data type: ItemSearchQueryFilterNot
    oneof_schema_9_validator: Optional[ItemSearchQueryFilterNot] = None
    # data type: ItemSearchQueryFilterOr
    oneof_schema_10_validator: Optional[ItemSearchQueryFilterOr] = None
    # data type: ItemSearchQueryFilterParent
    oneof_schema_11_validator: Optional[ItemSearchQueryFilterParent] = None
    # data type: ItemSearchQueryFilterStatus
    oneof_schema_12_validator: Optional[ItemSearchQueryFilterStatus] = None
    # data type: ItemSearchQueryFilterStatusCategory
    oneof_schema_13_validator: Optional[ItemSearchQueryFilterStatusCategory] = None
    # data type: ItemSearchQueryFilterUpdatedSince
    oneof_schema_14_validator: Optional[ItemSearchQueryFilterUpdatedSince] = None
    actual_instance: Optional[Union[ItemSearchQueryFilterAnd, ItemSearchQueryFilterAssignees, ItemSearchQueryFilterCreatedAt, ItemSearchQueryFilterFieldValue, ItemSearchQueryFilterIntegration, ItemSearchQueryFilterLastUpdatedAt, ItemSearchQueryFilterName, ItemSearchQueryFilterNot, ItemSearchQueryFilterOr, ItemSearchQueryFilterParent, ItemSearchQueryFilterStatus, ItemSearchQueryFilterStatusCategory, ItemSearchQueryFilterUpdatedSince, object]] = None
    one_of_schemas: Set[str] = { "ItemSearchQueryFilterAnd", "ItemSearchQueryFilterAssignees", "ItemSearchQueryFilterCreatedAt", "ItemSearchQueryFilterFieldValue", "ItemSearchQueryFilterIntegration", "ItemSearchQueryFilterLastUpdatedAt", "ItemSearchQueryFilterName", "ItemSearchQueryFilterNot", "ItemSearchQueryFilterOr", "ItemSearchQueryFilterParent", "ItemSearchQueryFilterStatus", "ItemSearchQueryFilterStatusCategory", "ItemSearchQueryFilterUpdatedSince", "object" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ItemSearchQueryFilter.model_construct()
        error_messages = []
        match = 0
        # validate data type: ItemSearchQueryFilterAnd
        if not isinstance(v, ItemSearchQueryFilterAnd):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ItemSearchQueryFilterAnd`")
        else:
            match += 1
        # validate data type: ItemSearchQueryFilterAssignees
        if not isinstance(v, ItemSearchQueryFilterAssignees):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ItemSearchQueryFilterAssignees`")
        else:
            match += 1
        # validate data type: ItemSearchQueryFilterCreatedAt
        if not isinstance(v, ItemSearchQueryFilterCreatedAt):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ItemSearchQueryFilterCreatedAt`")
        else:
            match += 1
        # validate data type: ItemSearchQueryFilterFieldValue
        if not isinstance(v, ItemSearchQueryFilterFieldValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ItemSearchQueryFilterFieldValue`")
        else:
            match += 1
        # validate data type: ItemSearchQueryFilterIntegration
        if not isinstance(v, ItemSearchQueryFilterIntegration):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ItemSearchQueryFilterIntegration`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_6_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: ItemSearchQueryFilterLastUpdatedAt
        if not isinstance(v, ItemSearchQueryFilterLastUpdatedAt):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ItemSearchQueryFilterLastUpdatedAt`")
        else:
            match += 1
        # validate data type: ItemSearchQueryFilterName
        if not isinstance(v, ItemSearchQueryFilterName):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ItemSearchQueryFilterName`")
        else:
            match += 1
        # validate data type: ItemSearchQueryFilterNot
        if not isinstance(v, ItemSearchQueryFilterNot):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ItemSearchQueryFilterNot`")
        else:
            match += 1
        # validate data type: ItemSearchQueryFilterOr
        if not isinstance(v, ItemSearchQueryFilterOr):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ItemSearchQueryFilterOr`")
        else:
            match += 1
        # validate data type: ItemSearchQueryFilterParent
        if not isinstance(v, ItemSearchQueryFilterParent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ItemSearchQueryFilterParent`")
        else:
            match += 1
        # validate data type: ItemSearchQueryFilterStatus
        if not isinstance(v, ItemSearchQueryFilterStatus):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ItemSearchQueryFilterStatus`")
        else:
            match += 1
        # validate data type: ItemSearchQueryFilterStatusCategory
        if not isinstance(v, ItemSearchQueryFilterStatusCategory):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ItemSearchQueryFilterStatusCategory`")
        else:
            match += 1
        # validate data type: ItemSearchQueryFilterUpdatedSince
        if not isinstance(v, ItemSearchQueryFilterUpdatedSince):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ItemSearchQueryFilterUpdatedSince`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ItemSearchQueryFilter with oneOf schemas: ItemSearchQueryFilterAnd, ItemSearchQueryFilterAssignees, ItemSearchQueryFilterCreatedAt, ItemSearchQueryFilterFieldValue, ItemSearchQueryFilterIntegration, ItemSearchQueryFilterLastUpdatedAt, ItemSearchQueryFilterName, ItemSearchQueryFilterNot, ItemSearchQueryFilterOr, ItemSearchQueryFilterParent, ItemSearchQueryFilterStatus, ItemSearchQueryFilterStatusCategory, ItemSearchQueryFilterUpdatedSince, object. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ItemSearchQueryFilter with oneOf schemas: ItemSearchQueryFilterAnd, ItemSearchQueryFilterAssignees, ItemSearchQueryFilterCreatedAt, ItemSearchQueryFilterFieldValue, ItemSearchQueryFilterIntegration, ItemSearchQueryFilterLastUpdatedAt, ItemSearchQueryFilterName, ItemSearchQueryFilterNot, ItemSearchQueryFilterOr, ItemSearchQueryFilterParent, ItemSearchQueryFilterStatus, ItemSearchQueryFilterStatusCategory, ItemSearchQueryFilterUpdatedSince, object. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ItemSearchQueryFilterAnd
        try:
            instance.actual_instance = ItemSearchQueryFilterAnd.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ItemSearchQueryFilterAssignees
        try:
            instance.actual_instance = ItemSearchQueryFilterAssignees.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ItemSearchQueryFilterCreatedAt
        try:
            instance.actual_instance = ItemSearchQueryFilterCreatedAt.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ItemSearchQueryFilterFieldValue
        try:
            instance.actual_instance = ItemSearchQueryFilterFieldValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ItemSearchQueryFilterIntegration
        try:
            instance.actual_instance = ItemSearchQueryFilterIntegration.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_6_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_6_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ItemSearchQueryFilterLastUpdatedAt
        try:
            instance.actual_instance = ItemSearchQueryFilterLastUpdatedAt.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ItemSearchQueryFilterName
        try:
            instance.actual_instance = ItemSearchQueryFilterName.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ItemSearchQueryFilterNot
        try:
            instance.actual_instance = ItemSearchQueryFilterNot.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ItemSearchQueryFilterOr
        try:
            instance.actual_instance = ItemSearchQueryFilterOr.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ItemSearchQueryFilterParent
        try:
            instance.actual_instance = ItemSearchQueryFilterParent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ItemSearchQueryFilterStatus
        try:
            instance.actual_instance = ItemSearchQueryFilterStatus.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ItemSearchQueryFilterStatusCategory
        try:
            instance.actual_instance = ItemSearchQueryFilterStatusCategory.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ItemSearchQueryFilterUpdatedSince
        try:
            instance.actual_instance = ItemSearchQueryFilterUpdatedSince.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ItemSearchQueryFilter with oneOf schemas: ItemSearchQueryFilterAnd, ItemSearchQueryFilterAssignees, ItemSearchQueryFilterCreatedAt, ItemSearchQueryFilterFieldValue, ItemSearchQueryFilterIntegration, ItemSearchQueryFilterLastUpdatedAt, ItemSearchQueryFilterName, ItemSearchQueryFilterNot, ItemSearchQueryFilterOr, ItemSearchQueryFilterParent, ItemSearchQueryFilterStatus, ItemSearchQueryFilterStatusCategory, ItemSearchQueryFilterUpdatedSince, object. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ItemSearchQueryFilter with oneOf schemas: ItemSearchQueryFilterAnd, ItemSearchQueryFilterAssignees, ItemSearchQueryFilterCreatedAt, ItemSearchQueryFilterFieldValue, ItemSearchQueryFilterIntegration, ItemSearchQueryFilterLastUpdatedAt, ItemSearchQueryFilterName, ItemSearchQueryFilterNot, ItemSearchQueryFilterOr, ItemSearchQueryFilterParent, ItemSearchQueryFilterStatus, ItemSearchQueryFilterStatusCategory, ItemSearchQueryFilterUpdatedSince, object. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ItemSearchQueryFilterAnd, ItemSearchQueryFilterAssignees, ItemSearchQueryFilterCreatedAt, ItemSearchQueryFilterFieldValue, ItemSearchQueryFilterIntegration, ItemSearchQueryFilterLastUpdatedAt, ItemSearchQueryFilterName, ItemSearchQueryFilterNot, ItemSearchQueryFilterOr, ItemSearchQueryFilterParent, ItemSearchQueryFilterStatus, ItemSearchQueryFilterStatusCategory, ItemSearchQueryFilterUpdatedSince, object]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

from airfocus_client.models.item_search_query_filter_and import ItemSearchQueryFilterAnd
from airfocus_client.models.item_search_query_filter_not import ItemSearchQueryFilterNot
from airfocus_client.models.item_search_query_filter_or import ItemSearchQueryFilterOr
# TODO: Rewrite to not use raise_errors
ItemSearchQueryFilter.model_rebuild(raise_errors=False)

