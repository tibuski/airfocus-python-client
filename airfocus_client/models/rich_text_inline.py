# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from airfocus_client.models.rich_text_inline_code import RichTextInlineCode
from airfocus_client.models.rich_text_inline_custom import RichTextInlineCustom
from airfocus_client.models.rich_text_inline_mention import RichTextInlineMention
from airfocus_client.models.rich_text_inline_text import RichTextInlineText
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

RICHTEXTINLINE_ONE_OF_SCHEMAS = ["RichTextInlineBold", "RichTextInlineCode", "RichTextInlineCustom", "RichTextInlineImage", "RichTextInlineItalic", "RichTextInlineLink", "RichTextInlineMention", "RichTextInlineStrikeThrough", "RichTextInlineText", "RichTextInlineUnderline"]

class RichTextInline(BaseModel):
    """
    RichTextInline
    """
    # data type: RichTextInlineBold
    oneof_schema_1_validator: Optional[RichTextInlineBold] = None
    # data type: RichTextInlineCode
    oneof_schema_2_validator: Optional[RichTextInlineCode] = None
    # data type: RichTextInlineCustom
    oneof_schema_3_validator: Optional[RichTextInlineCustom] = None
    # data type: RichTextInlineImage
    oneof_schema_4_validator: Optional[RichTextInlineImage] = None
    # data type: RichTextInlineItalic
    oneof_schema_5_validator: Optional[RichTextInlineItalic] = None
    # data type: RichTextInlineLink
    oneof_schema_6_validator: Optional[RichTextInlineLink] = None
    # data type: RichTextInlineMention
    oneof_schema_7_validator: Optional[RichTextInlineMention] = None
    # data type: RichTextInlineStrikeThrough
    oneof_schema_8_validator: Optional[RichTextInlineStrikeThrough] = None
    # data type: RichTextInlineText
    oneof_schema_9_validator: Optional[RichTextInlineText] = None
    # data type: RichTextInlineUnderline
    oneof_schema_10_validator: Optional[RichTextInlineUnderline] = None
    actual_instance: Optional[Union[RichTextInlineBold, RichTextInlineCode, RichTextInlineCustom, RichTextInlineImage, RichTextInlineItalic, RichTextInlineLink, RichTextInlineMention, RichTextInlineStrikeThrough, RichTextInlineText, RichTextInlineUnderline]] = None
    one_of_schemas: Set[str] = { "RichTextInlineBold", "RichTextInlineCode", "RichTextInlineCustom", "RichTextInlineImage", "RichTextInlineItalic", "RichTextInlineLink", "RichTextInlineMention", "RichTextInlineStrikeThrough", "RichTextInlineText", "RichTextInlineUnderline" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = RichTextInline.model_construct()
        error_messages = []
        match = 0
        # validate data type: RichTextInlineBold
        if not isinstance(v, RichTextInlineBold):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextInlineBold`")
        else:
            match += 1
        # validate data type: RichTextInlineCode
        if not isinstance(v, RichTextInlineCode):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextInlineCode`")
        else:
            match += 1
        # validate data type: RichTextInlineCustom
        if not isinstance(v, RichTextInlineCustom):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextInlineCustom`")
        else:
            match += 1
        # validate data type: RichTextInlineImage
        if not isinstance(v, RichTextInlineImage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextInlineImage`")
        else:
            match += 1
        # validate data type: RichTextInlineItalic
        if not isinstance(v, RichTextInlineItalic):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextInlineItalic`")
        else:
            match += 1
        # validate data type: RichTextInlineLink
        if not isinstance(v, RichTextInlineLink):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextInlineLink`")
        else:
            match += 1
        # validate data type: RichTextInlineMention
        if not isinstance(v, RichTextInlineMention):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextInlineMention`")
        else:
            match += 1
        # validate data type: RichTextInlineStrikeThrough
        if not isinstance(v, RichTextInlineStrikeThrough):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextInlineStrikeThrough`")
        else:
            match += 1
        # validate data type: RichTextInlineText
        if not isinstance(v, RichTextInlineText):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextInlineText`")
        else:
            match += 1
        # validate data type: RichTextInlineUnderline
        if not isinstance(v, RichTextInlineUnderline):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RichTextInlineUnderline`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in RichTextInline with oneOf schemas: RichTextInlineBold, RichTextInlineCode, RichTextInlineCustom, RichTextInlineImage, RichTextInlineItalic, RichTextInlineLink, RichTextInlineMention, RichTextInlineStrikeThrough, RichTextInlineText, RichTextInlineUnderline. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in RichTextInline with oneOf schemas: RichTextInlineBold, RichTextInlineCode, RichTextInlineCustom, RichTextInlineImage, RichTextInlineItalic, RichTextInlineLink, RichTextInlineMention, RichTextInlineStrikeThrough, RichTextInlineText, RichTextInlineUnderline. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into RichTextInlineBold
        try:
            instance.actual_instance = RichTextInlineBold.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextInlineCode
        try:
            instance.actual_instance = RichTextInlineCode.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextInlineCustom
        try:
            instance.actual_instance = RichTextInlineCustom.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextInlineImage
        try:
            instance.actual_instance = RichTextInlineImage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextInlineItalic
        try:
            instance.actual_instance = RichTextInlineItalic.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextInlineLink
        try:
            instance.actual_instance = RichTextInlineLink.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextInlineMention
        try:
            instance.actual_instance = RichTextInlineMention.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextInlineStrikeThrough
        try:
            instance.actual_instance = RichTextInlineStrikeThrough.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextInlineText
        try:
            instance.actual_instance = RichTextInlineText.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RichTextInlineUnderline
        try:
            instance.actual_instance = RichTextInlineUnderline.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into RichTextInline with oneOf schemas: RichTextInlineBold, RichTextInlineCode, RichTextInlineCustom, RichTextInlineImage, RichTextInlineItalic, RichTextInlineLink, RichTextInlineMention, RichTextInlineStrikeThrough, RichTextInlineText, RichTextInlineUnderline. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into RichTextInline with oneOf schemas: RichTextInlineBold, RichTextInlineCode, RichTextInlineCustom, RichTextInlineImage, RichTextInlineItalic, RichTextInlineLink, RichTextInlineMention, RichTextInlineStrikeThrough, RichTextInlineText, RichTextInlineUnderline. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], RichTextInlineBold, RichTextInlineCode, RichTextInlineCustom, RichTextInlineImage, RichTextInlineItalic, RichTextInlineLink, RichTextInlineMention, RichTextInlineStrikeThrough, RichTextInlineText, RichTextInlineUnderline]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

from airfocus_client.models.rich_text_inline_bold import RichTextInlineBold
from airfocus_client.models.rich_text_inline_image import RichTextInlineImage
from airfocus_client.models.rich_text_inline_italic import RichTextInlineItalic
from airfocus_client.models.rich_text_inline_link import RichTextInlineLink
from airfocus_client.models.rich_text_inline_strike_through import RichTextInlineStrikeThrough
from airfocus_client.models.rich_text_inline_underline import RichTextInlineUnderline
# TODO: Rewrite to not use raise_errors
RichTextInline.model_rebuild(raise_errors=False)

