# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ItemAttachmentWithEmbed(BaseModel):
    """
    A connection link between an item and an uploaded attachment.
    """ # noqa: E501
    embedded: Dict[str, Any] = Field(alias="_embedded")
    content_type: StrictStr = Field(description="Type of updated content.", alias="contentType")
    created_at: datetime = Field(description="When this attachment link has been created.", alias="createdAt")
    id: StrictStr = Field(description="ID of an item-attachment link.")
    item_id: StrictStr = Field(description="ID of the item to which the attachment is linked.", alias="itemId")
    last_updated_at: datetime = Field(description="When this attachment link has been updated for the last time.", alias="lastUpdatedAt")
    name: StrictStr = Field(description="Name of the attachment, e.g. its file name (to be displayed in UI).")
    uri: StrictStr = Field(description="URI of the attachment contents. It can be any URI, but conventionally it's a relative URI like 'attachment:1ecb9ecd-8a97-403a-a74a-741eb4b8fb69' with UUID of a file uploaded to airfocus file-storage. Such URI is then resolved by clients into a full HTTPS URL.")
    __properties: ClassVar[List[str]] = ["_embedded", "contentType", "createdAt", "id", "itemId", "lastUpdatedAt", "name", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemAttachmentWithEmbed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemAttachmentWithEmbed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_embedded": obj.get("_embedded"),
            "contentType": obj.get("contentType"),
            "createdAt": obj.get("createdAt"),
            "id": obj.get("id"),
            "itemId": obj.get("itemId"),
            "lastUpdatedAt": obj.get("lastUpdatedAt"),
            "name": obj.get("name"),
            "uri": obj.get("uri")
        })
        return _obj


