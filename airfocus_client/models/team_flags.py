# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from airfocus_client.models.team_flag import TeamFlag
from typing import Optional, Set
from typing_extensions import Self

class TeamFlags(BaseModel):
    """
    TeamFlags
    """ # noqa: E501
    enable_ai: TeamFlag = Field(alias="enableAi")
    enable_okr_app: TeamFlag = Field(alias="enableOkrApp")
    forbid_share_link_creation: TeamFlag = Field(alias="forbidShareLinkCreation")
    remove_branding: TeamFlag = Field(alias="removeBranding")
    require_portal_login: TeamFlag = Field(alias="requirePortalLogin")
    require_portal_password: TeamFlag = Field(alias="requirePortalPassword")
    require_share_link_password: TeamFlag = Field(alias="requireShareLinkPassword")
    restrict_share_link_creation: TeamFlag = Field(alias="restrictShareLinkCreation")
    __properties: ClassVar[List[str]] = ["enableAi", "enableOkrApp", "forbidShareLinkCreation", "removeBranding", "requirePortalLogin", "requirePortalPassword", "requireShareLinkPassword", "restrictShareLinkCreation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeamFlags from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of enable_ai
        if self.enable_ai:
            _dict['enableAi'] = self.enable_ai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enable_okr_app
        if self.enable_okr_app:
            _dict['enableOkrApp'] = self.enable_okr_app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of forbid_share_link_creation
        if self.forbid_share_link_creation:
            _dict['forbidShareLinkCreation'] = self.forbid_share_link_creation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remove_branding
        if self.remove_branding:
            _dict['removeBranding'] = self.remove_branding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of require_portal_login
        if self.require_portal_login:
            _dict['requirePortalLogin'] = self.require_portal_login.to_dict()
        # override the default output from pydantic by calling `to_dict()` of require_portal_password
        if self.require_portal_password:
            _dict['requirePortalPassword'] = self.require_portal_password.to_dict()
        # override the default output from pydantic by calling `to_dict()` of require_share_link_password
        if self.require_share_link_password:
            _dict['requireShareLinkPassword'] = self.require_share_link_password.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restrict_share_link_creation
        if self.restrict_share_link_creation:
            _dict['restrictShareLinkCreation'] = self.restrict_share_link_creation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeamFlags from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableAi": TeamFlag.from_dict(obj["enableAi"]) if obj.get("enableAi") is not None else None,
            "enableOkrApp": TeamFlag.from_dict(obj["enableOkrApp"]) if obj.get("enableOkrApp") is not None else None,
            "forbidShareLinkCreation": TeamFlag.from_dict(obj["forbidShareLinkCreation"]) if obj.get("forbidShareLinkCreation") is not None else None,
            "removeBranding": TeamFlag.from_dict(obj["removeBranding"]) if obj.get("removeBranding") is not None else None,
            "requirePortalLogin": TeamFlag.from_dict(obj["requirePortalLogin"]) if obj.get("requirePortalLogin") is not None else None,
            "requirePortalPassword": TeamFlag.from_dict(obj["requirePortalPassword"]) if obj.get("requirePortalPassword") is not None else None,
            "requireShareLinkPassword": TeamFlag.from_dict(obj["requireShareLinkPassword"]) if obj.get("requireShareLinkPassword") is not None else None,
            "restrictShareLinkCreation": TeamFlag.from_dict(obj["restrictShareLinkCreation"]) if obj.get("restrictShareLinkCreation") is not None else None
        })
        return _obj


