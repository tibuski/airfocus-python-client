# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from airfocus_client.models.boolean_field_with_field_embed import BooleanFieldWithFieldEmbed
from airfocus_client.models.date_field_with_field_embed import DateFieldWithFieldEmbed
from airfocus_client.models.date_range_field_with_field_embed import DateRangeFieldWithFieldEmbed
from airfocus_client.models.form_source_field_with_field_embed import FormSourceFieldWithFieldEmbed
from airfocus_client.models.form_target_field_with_field_embed import FormTargetFieldWithFieldEmbed
from airfocus_client.models.insights_field_with_field_embed import InsightsFieldWithFieldEmbed
from airfocus_client.models.mirror_source_field_with_field_embed import MirrorSourceFieldWithFieldEmbed
from airfocus_client.models.mirror_target_field_with_field_embed import MirrorTargetFieldWithFieldEmbed
from airfocus_client.models.number_field_with_field_embed import NumberFieldWithFieldEmbed
from airfocus_client.models.okr_checkins_field_with_field_embed import OkrCheckinsFieldWithFieldEmbed
from airfocus_client.models.okr_confidence_field_with_field_embed import OkrConfidenceFieldWithFieldEmbed
from airfocus_client.models.okr_key_result_reference_field_with_field_embed import OkrKeyResultReferenceFieldWithFieldEmbed
from airfocus_client.models.okr_key_results_field_with_field_embed import OkrKeyResultsFieldWithFieldEmbed
from airfocus_client.models.okr_progress_field_with_field_embed import OkrProgressFieldWithFieldEmbed
from airfocus_client.models.okr_time_period_field_with_field_embed import OkrTimePeriodFieldWithFieldEmbed
from airfocus_client.models.people_field_with_field_embed import PeopleFieldWithFieldEmbed
from airfocus_client.models.portal_field_with_field_embed import PortalFieldWithFieldEmbed
from airfocus_client.models.prioritization_field_with_field_embed import PrioritizationFieldWithFieldEmbed
from airfocus_client.models.select_field_with_field_embed import SelectFieldWithFieldEmbed
from airfocus_client.models.text_field_with_field_embed import TextFieldWithFieldEmbed
from airfocus_client.models.time_period_field_with_field_embed import TimePeriodFieldWithFieldEmbed
from airfocus_client.models.votes_field_with_field_embed import VotesFieldWithFieldEmbed
from airfocus_client.models.voting_score_field_with_field_embed import VotingScoreFieldWithFieldEmbed
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

FIELDWITHFIELDEMBED_ONE_OF_SCHEMAS = ["BooleanFieldWithFieldEmbed", "DateFieldWithFieldEmbed", "DateRangeFieldWithFieldEmbed", "FormSourceFieldWithFieldEmbed", "FormTargetFieldWithFieldEmbed", "InsightsFieldWithFieldEmbed", "MirrorSourceFieldWithFieldEmbed", "MirrorTargetFieldWithFieldEmbed", "NumberFieldWithFieldEmbed", "OkrCheckinsFieldWithFieldEmbed", "OkrConfidenceFieldWithFieldEmbed", "OkrKeyResultReferenceFieldWithFieldEmbed", "OkrKeyResultsFieldWithFieldEmbed", "OkrProgressFieldWithFieldEmbed", "OkrTimePeriodFieldWithFieldEmbed", "PeopleFieldWithFieldEmbed", "PortalFieldWithFieldEmbed", "PrioritizationFieldWithFieldEmbed", "SelectFieldWithFieldEmbed", "TextFieldWithFieldEmbed", "TimePeriodFieldWithFieldEmbed", "VotesFieldWithFieldEmbed", "VotingScoreFieldWithFieldEmbed"]

class FieldWithFieldEmbed(BaseModel):
    """
    FieldWithFieldEmbed
    """
    # data type: BooleanFieldWithFieldEmbed
    oneof_schema_1_validator: Optional[BooleanFieldWithFieldEmbed] = None
    # data type: DateFieldWithFieldEmbed
    oneof_schema_2_validator: Optional[DateFieldWithFieldEmbed] = None
    # data type: DateRangeFieldWithFieldEmbed
    oneof_schema_3_validator: Optional[DateRangeFieldWithFieldEmbed] = None
    # data type: FormSourceFieldWithFieldEmbed
    oneof_schema_4_validator: Optional[FormSourceFieldWithFieldEmbed] = None
    # data type: FormTargetFieldWithFieldEmbed
    oneof_schema_5_validator: Optional[FormTargetFieldWithFieldEmbed] = None
    # data type: InsightsFieldWithFieldEmbed
    oneof_schema_6_validator: Optional[InsightsFieldWithFieldEmbed] = None
    # data type: MirrorSourceFieldWithFieldEmbed
    oneof_schema_7_validator: Optional[MirrorSourceFieldWithFieldEmbed] = None
    # data type: MirrorTargetFieldWithFieldEmbed
    oneof_schema_8_validator: Optional[MirrorTargetFieldWithFieldEmbed] = None
    # data type: NumberFieldWithFieldEmbed
    oneof_schema_9_validator: Optional[NumberFieldWithFieldEmbed] = None
    # data type: OkrCheckinsFieldWithFieldEmbed
    oneof_schema_10_validator: Optional[OkrCheckinsFieldWithFieldEmbed] = None
    # data type: OkrConfidenceFieldWithFieldEmbed
    oneof_schema_11_validator: Optional[OkrConfidenceFieldWithFieldEmbed] = None
    # data type: OkrKeyResultReferenceFieldWithFieldEmbed
    oneof_schema_12_validator: Optional[OkrKeyResultReferenceFieldWithFieldEmbed] = None
    # data type: OkrKeyResultsFieldWithFieldEmbed
    oneof_schema_13_validator: Optional[OkrKeyResultsFieldWithFieldEmbed] = None
    # data type: OkrProgressFieldWithFieldEmbed
    oneof_schema_14_validator: Optional[OkrProgressFieldWithFieldEmbed] = None
    # data type: OkrTimePeriodFieldWithFieldEmbed
    oneof_schema_15_validator: Optional[OkrTimePeriodFieldWithFieldEmbed] = None
    # data type: PeopleFieldWithFieldEmbed
    oneof_schema_16_validator: Optional[PeopleFieldWithFieldEmbed] = None
    # data type: PortalFieldWithFieldEmbed
    oneof_schema_17_validator: Optional[PortalFieldWithFieldEmbed] = None
    # data type: PrioritizationFieldWithFieldEmbed
    oneof_schema_18_validator: Optional[PrioritizationFieldWithFieldEmbed] = None
    # data type: SelectFieldWithFieldEmbed
    oneof_schema_19_validator: Optional[SelectFieldWithFieldEmbed] = None
    # data type: TextFieldWithFieldEmbed
    oneof_schema_20_validator: Optional[TextFieldWithFieldEmbed] = None
    # data type: TimePeriodFieldWithFieldEmbed
    oneof_schema_21_validator: Optional[TimePeriodFieldWithFieldEmbed] = None
    # data type: VotesFieldWithFieldEmbed
    oneof_schema_22_validator: Optional[VotesFieldWithFieldEmbed] = None
    # data type: VotingScoreFieldWithFieldEmbed
    oneof_schema_23_validator: Optional[VotingScoreFieldWithFieldEmbed] = None
    actual_instance: Optional[Union[BooleanFieldWithFieldEmbed, DateFieldWithFieldEmbed, DateRangeFieldWithFieldEmbed, FormSourceFieldWithFieldEmbed, FormTargetFieldWithFieldEmbed, InsightsFieldWithFieldEmbed, MirrorSourceFieldWithFieldEmbed, MirrorTargetFieldWithFieldEmbed, NumberFieldWithFieldEmbed, OkrCheckinsFieldWithFieldEmbed, OkrConfidenceFieldWithFieldEmbed, OkrKeyResultReferenceFieldWithFieldEmbed, OkrKeyResultsFieldWithFieldEmbed, OkrProgressFieldWithFieldEmbed, OkrTimePeriodFieldWithFieldEmbed, PeopleFieldWithFieldEmbed, PortalFieldWithFieldEmbed, PrioritizationFieldWithFieldEmbed, SelectFieldWithFieldEmbed, TextFieldWithFieldEmbed, TimePeriodFieldWithFieldEmbed, VotesFieldWithFieldEmbed, VotingScoreFieldWithFieldEmbed]] = None
    one_of_schemas: Set[str] = { "BooleanFieldWithFieldEmbed", "DateFieldWithFieldEmbed", "DateRangeFieldWithFieldEmbed", "FormSourceFieldWithFieldEmbed", "FormTargetFieldWithFieldEmbed", "InsightsFieldWithFieldEmbed", "MirrorSourceFieldWithFieldEmbed", "MirrorTargetFieldWithFieldEmbed", "NumberFieldWithFieldEmbed", "OkrCheckinsFieldWithFieldEmbed", "OkrConfidenceFieldWithFieldEmbed", "OkrKeyResultReferenceFieldWithFieldEmbed", "OkrKeyResultsFieldWithFieldEmbed", "OkrProgressFieldWithFieldEmbed", "OkrTimePeriodFieldWithFieldEmbed", "PeopleFieldWithFieldEmbed", "PortalFieldWithFieldEmbed", "PrioritizationFieldWithFieldEmbed", "SelectFieldWithFieldEmbed", "TextFieldWithFieldEmbed", "TimePeriodFieldWithFieldEmbed", "VotesFieldWithFieldEmbed", "VotingScoreFieldWithFieldEmbed" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = FieldWithFieldEmbed.model_construct()
        error_messages = []
        match = 0
        # validate data type: BooleanFieldWithFieldEmbed
        if not isinstance(v, BooleanFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BooleanFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: DateFieldWithFieldEmbed
        if not isinstance(v, DateFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DateFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: DateRangeFieldWithFieldEmbed
        if not isinstance(v, DateRangeFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DateRangeFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: FormSourceFieldWithFieldEmbed
        if not isinstance(v, FormSourceFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FormSourceFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: FormTargetFieldWithFieldEmbed
        if not isinstance(v, FormTargetFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FormTargetFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: InsightsFieldWithFieldEmbed
        if not isinstance(v, InsightsFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InsightsFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: MirrorSourceFieldWithFieldEmbed
        if not isinstance(v, MirrorSourceFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MirrorSourceFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: MirrorTargetFieldWithFieldEmbed
        if not isinstance(v, MirrorTargetFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MirrorTargetFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: NumberFieldWithFieldEmbed
        if not isinstance(v, NumberFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NumberFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: OkrCheckinsFieldWithFieldEmbed
        if not isinstance(v, OkrCheckinsFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OkrCheckinsFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: OkrConfidenceFieldWithFieldEmbed
        if not isinstance(v, OkrConfidenceFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OkrConfidenceFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: OkrKeyResultReferenceFieldWithFieldEmbed
        if not isinstance(v, OkrKeyResultReferenceFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OkrKeyResultReferenceFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: OkrKeyResultsFieldWithFieldEmbed
        if not isinstance(v, OkrKeyResultsFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OkrKeyResultsFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: OkrProgressFieldWithFieldEmbed
        if not isinstance(v, OkrProgressFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OkrProgressFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: OkrTimePeriodFieldWithFieldEmbed
        if not isinstance(v, OkrTimePeriodFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OkrTimePeriodFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: PeopleFieldWithFieldEmbed
        if not isinstance(v, PeopleFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PeopleFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: PortalFieldWithFieldEmbed
        if not isinstance(v, PortalFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PortalFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: PrioritizationFieldWithFieldEmbed
        if not isinstance(v, PrioritizationFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrioritizationFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: SelectFieldWithFieldEmbed
        if not isinstance(v, SelectFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SelectFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: TextFieldWithFieldEmbed
        if not isinstance(v, TextFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: TimePeriodFieldWithFieldEmbed
        if not isinstance(v, TimePeriodFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimePeriodFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: VotesFieldWithFieldEmbed
        if not isinstance(v, VotesFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VotesFieldWithFieldEmbed`")
        else:
            match += 1
        # validate data type: VotingScoreFieldWithFieldEmbed
        if not isinstance(v, VotingScoreFieldWithFieldEmbed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VotingScoreFieldWithFieldEmbed`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in FieldWithFieldEmbed with oneOf schemas: BooleanFieldWithFieldEmbed, DateFieldWithFieldEmbed, DateRangeFieldWithFieldEmbed, FormSourceFieldWithFieldEmbed, FormTargetFieldWithFieldEmbed, InsightsFieldWithFieldEmbed, MirrorSourceFieldWithFieldEmbed, MirrorTargetFieldWithFieldEmbed, NumberFieldWithFieldEmbed, OkrCheckinsFieldWithFieldEmbed, OkrConfidenceFieldWithFieldEmbed, OkrKeyResultReferenceFieldWithFieldEmbed, OkrKeyResultsFieldWithFieldEmbed, OkrProgressFieldWithFieldEmbed, OkrTimePeriodFieldWithFieldEmbed, PeopleFieldWithFieldEmbed, PortalFieldWithFieldEmbed, PrioritizationFieldWithFieldEmbed, SelectFieldWithFieldEmbed, TextFieldWithFieldEmbed, TimePeriodFieldWithFieldEmbed, VotesFieldWithFieldEmbed, VotingScoreFieldWithFieldEmbed. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in FieldWithFieldEmbed with oneOf schemas: BooleanFieldWithFieldEmbed, DateFieldWithFieldEmbed, DateRangeFieldWithFieldEmbed, FormSourceFieldWithFieldEmbed, FormTargetFieldWithFieldEmbed, InsightsFieldWithFieldEmbed, MirrorSourceFieldWithFieldEmbed, MirrorTargetFieldWithFieldEmbed, NumberFieldWithFieldEmbed, OkrCheckinsFieldWithFieldEmbed, OkrConfidenceFieldWithFieldEmbed, OkrKeyResultReferenceFieldWithFieldEmbed, OkrKeyResultsFieldWithFieldEmbed, OkrProgressFieldWithFieldEmbed, OkrTimePeriodFieldWithFieldEmbed, PeopleFieldWithFieldEmbed, PortalFieldWithFieldEmbed, PrioritizationFieldWithFieldEmbed, SelectFieldWithFieldEmbed, TextFieldWithFieldEmbed, TimePeriodFieldWithFieldEmbed, VotesFieldWithFieldEmbed, VotingScoreFieldWithFieldEmbed. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into BooleanFieldWithFieldEmbed
        try:
            instance.actual_instance = BooleanFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DateFieldWithFieldEmbed
        try:
            instance.actual_instance = DateFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DateRangeFieldWithFieldEmbed
        try:
            instance.actual_instance = DateRangeFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FormSourceFieldWithFieldEmbed
        try:
            instance.actual_instance = FormSourceFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FormTargetFieldWithFieldEmbed
        try:
            instance.actual_instance = FormTargetFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InsightsFieldWithFieldEmbed
        try:
            instance.actual_instance = InsightsFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MirrorSourceFieldWithFieldEmbed
        try:
            instance.actual_instance = MirrorSourceFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MirrorTargetFieldWithFieldEmbed
        try:
            instance.actual_instance = MirrorTargetFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NumberFieldWithFieldEmbed
        try:
            instance.actual_instance = NumberFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OkrCheckinsFieldWithFieldEmbed
        try:
            instance.actual_instance = OkrCheckinsFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OkrConfidenceFieldWithFieldEmbed
        try:
            instance.actual_instance = OkrConfidenceFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OkrKeyResultReferenceFieldWithFieldEmbed
        try:
            instance.actual_instance = OkrKeyResultReferenceFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OkrKeyResultsFieldWithFieldEmbed
        try:
            instance.actual_instance = OkrKeyResultsFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OkrProgressFieldWithFieldEmbed
        try:
            instance.actual_instance = OkrProgressFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OkrTimePeriodFieldWithFieldEmbed
        try:
            instance.actual_instance = OkrTimePeriodFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PeopleFieldWithFieldEmbed
        try:
            instance.actual_instance = PeopleFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PortalFieldWithFieldEmbed
        try:
            instance.actual_instance = PortalFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PrioritizationFieldWithFieldEmbed
        try:
            instance.actual_instance = PrioritizationFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SelectFieldWithFieldEmbed
        try:
            instance.actual_instance = SelectFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TextFieldWithFieldEmbed
        try:
            instance.actual_instance = TextFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TimePeriodFieldWithFieldEmbed
        try:
            instance.actual_instance = TimePeriodFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VotesFieldWithFieldEmbed
        try:
            instance.actual_instance = VotesFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VotingScoreFieldWithFieldEmbed
        try:
            instance.actual_instance = VotingScoreFieldWithFieldEmbed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into FieldWithFieldEmbed with oneOf schemas: BooleanFieldWithFieldEmbed, DateFieldWithFieldEmbed, DateRangeFieldWithFieldEmbed, FormSourceFieldWithFieldEmbed, FormTargetFieldWithFieldEmbed, InsightsFieldWithFieldEmbed, MirrorSourceFieldWithFieldEmbed, MirrorTargetFieldWithFieldEmbed, NumberFieldWithFieldEmbed, OkrCheckinsFieldWithFieldEmbed, OkrConfidenceFieldWithFieldEmbed, OkrKeyResultReferenceFieldWithFieldEmbed, OkrKeyResultsFieldWithFieldEmbed, OkrProgressFieldWithFieldEmbed, OkrTimePeriodFieldWithFieldEmbed, PeopleFieldWithFieldEmbed, PortalFieldWithFieldEmbed, PrioritizationFieldWithFieldEmbed, SelectFieldWithFieldEmbed, TextFieldWithFieldEmbed, TimePeriodFieldWithFieldEmbed, VotesFieldWithFieldEmbed, VotingScoreFieldWithFieldEmbed. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into FieldWithFieldEmbed with oneOf schemas: BooleanFieldWithFieldEmbed, DateFieldWithFieldEmbed, DateRangeFieldWithFieldEmbed, FormSourceFieldWithFieldEmbed, FormTargetFieldWithFieldEmbed, InsightsFieldWithFieldEmbed, MirrorSourceFieldWithFieldEmbed, MirrorTargetFieldWithFieldEmbed, NumberFieldWithFieldEmbed, OkrCheckinsFieldWithFieldEmbed, OkrConfidenceFieldWithFieldEmbed, OkrKeyResultReferenceFieldWithFieldEmbed, OkrKeyResultsFieldWithFieldEmbed, OkrProgressFieldWithFieldEmbed, OkrTimePeriodFieldWithFieldEmbed, PeopleFieldWithFieldEmbed, PortalFieldWithFieldEmbed, PrioritizationFieldWithFieldEmbed, SelectFieldWithFieldEmbed, TextFieldWithFieldEmbed, TimePeriodFieldWithFieldEmbed, VotesFieldWithFieldEmbed, VotingScoreFieldWithFieldEmbed. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BooleanFieldWithFieldEmbed, DateFieldWithFieldEmbed, DateRangeFieldWithFieldEmbed, FormSourceFieldWithFieldEmbed, FormTargetFieldWithFieldEmbed, InsightsFieldWithFieldEmbed, MirrorSourceFieldWithFieldEmbed, MirrorTargetFieldWithFieldEmbed, NumberFieldWithFieldEmbed, OkrCheckinsFieldWithFieldEmbed, OkrConfidenceFieldWithFieldEmbed, OkrKeyResultReferenceFieldWithFieldEmbed, OkrKeyResultsFieldWithFieldEmbed, OkrProgressFieldWithFieldEmbed, OkrTimePeriodFieldWithFieldEmbed, PeopleFieldWithFieldEmbed, PortalFieldWithFieldEmbed, PrioritizationFieldWithFieldEmbed, SelectFieldWithFieldEmbed, TextFieldWithFieldEmbed, TimePeriodFieldWithFieldEmbed, VotesFieldWithFieldEmbed, VotingScoreFieldWithFieldEmbed]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


