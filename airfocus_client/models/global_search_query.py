# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from airfocus_client.models.status_category import StatusCategory
from typing import Optional, Set
from typing_extensions import Self

class GlobalSearchQuery(BaseModel):
    """
    GlobalSearchQuery
    """ # noqa: E501
    archived: Optional[StrictBool] = Field(default=None, description="Search only archived or only non-archived items (only non-archived by default)")
    assignee_user_ids: Optional[List[StrictStr]] = Field(default=None, description="Narrow down the search to items which are assigned to the specified users", alias="assigneeUserIds")
    context_query: Optional[StrictStr] = Field(default=None, description="Context-string for AI to match items by similarity", alias="contextQuery")
    search_query: Optional[StrictStr] = Field(default=None, description="Text to search in contents of items", alias="searchQuery")
    status_categories: Optional[List[StatusCategory]] = Field(default=None, description="Narrow down the search to items with status in the specified status-categories", alias="statusCategories")
    workspace_ids: Optional[List[StrictStr]] = Field(default=None, description="Narrow down the search to specific workspaces", alias="workspaceIds")
    __properties: ClassVar[List[str]] = ["archived", "assigneeUserIds", "contextQuery", "searchQuery", "statusCategories", "workspaceIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GlobalSearchQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GlobalSearchQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archived": obj.get("archived"),
            "assigneeUserIds": obj.get("assigneeUserIds"),
            "contextQuery": obj.get("contextQuery"),
            "searchQuery": obj.get("searchQuery"),
            "statusCategories": obj.get("statusCategories"),
            "workspaceIds": obj.get("workspaceIds")
        })
        return _obj


