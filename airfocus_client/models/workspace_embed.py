# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from airfocus_client.models.app import App
from airfocus_client.models.field_with_field_embed import FieldWithFieldEmbed
from airfocus_client.models.integration_summary import IntegrationSummary
from airfocus_client.models.permission import Permission
from airfocus_client.models.status import Status
from airfocus_client.models.view import View
from airfocus_client.models.workspace_embed_relation import WorkspaceEmbedRelation
from airfocus_client.models.workspace_embed_workspace_group import WorkspaceEmbedWorkspaceGroup
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceEmbed(BaseModel):
    """
    WorkspaceEmbed
    """ # noqa: E501
    apps: Dict[str, App]
    fields: Dict[str, FieldWithFieldEmbed]
    integrations: Dict[str, IntegrationSummary]
    item_count: StrictInt = Field(alias="itemCount")
    item_status_count: Dict[str, StrictInt] = Field(alias="itemStatusCount")
    item_status_count_archived: Dict[str, StrictInt] = Field(alias="itemStatusCountArchived")
    permissions: Dict[str, Permission]
    statuses: Dict[str, Status]
    views: Dict[str, View]
    children: Optional[List[WorkspaceEmbedRelation]] = None
    current_permission: Optional[Permission] = Field(default=None, alias="currentPermission")
    parents: Optional[List[WorkspaceEmbedRelation]] = None
    workspace_group: Optional[WorkspaceEmbedWorkspaceGroup] = Field(default=None, alias="workspaceGroup")
    __properties: ClassVar[List[str]] = ["apps", "fields", "integrations", "itemCount", "itemStatusCount", "itemStatusCountArchived", "permissions", "statuses", "views", "children", "currentPermission", "parents", "workspaceGroup"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceEmbed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in apps (dict)
        _field_dict = {}
        if self.apps:
            for _key_apps in self.apps:
                if self.apps[_key_apps]:
                    _field_dict[_key_apps] = self.apps[_key_apps].to_dict()
            _dict['apps'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in fields (dict)
        _field_dict = {}
        if self.fields:
            for _key_fields in self.fields:
                if self.fields[_key_fields]:
                    _field_dict[_key_fields] = self.fields[_key_fields].to_dict()
            _dict['fields'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in integrations (dict)
        _field_dict = {}
        if self.integrations:
            for _key_integrations in self.integrations:
                if self.integrations[_key_integrations]:
                    _field_dict[_key_integrations] = self.integrations[_key_integrations].to_dict()
            _dict['integrations'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in statuses (dict)
        _field_dict = {}
        if self.statuses:
            for _key_statuses in self.statuses:
                if self.statuses[_key_statuses]:
                    _field_dict[_key_statuses] = self.statuses[_key_statuses].to_dict()
            _dict['statuses'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in views (dict)
        _field_dict = {}
        if self.views:
            for _key_views in self.views:
                if self.views[_key_views]:
                    _field_dict[_key_views] = self.views[_key_views].to_dict()
            _dict['views'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parents (list)
        _items = []
        if self.parents:
            for _item_parents in self.parents:
                if _item_parents:
                    _items.append(_item_parents.to_dict())
            _dict['parents'] = _items
        # override the default output from pydantic by calling `to_dict()` of workspace_group
        if self.workspace_group:
            _dict['workspaceGroup'] = self.workspace_group.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceEmbed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apps": dict(
                (_k, App.from_dict(_v))
                for _k, _v in obj["apps"].items()
            )
            if obj.get("apps") is not None
            else None,
            "fields": dict(
                (_k, FieldWithFieldEmbed.from_dict(_v))
                for _k, _v in obj["fields"].items()
            )
            if obj.get("fields") is not None
            else None,
            "integrations": dict(
                (_k, IntegrationSummary.from_dict(_v))
                for _k, _v in obj["integrations"].items()
            )
            if obj.get("integrations") is not None
            else None,
            "itemCount": obj.get("itemCount"),
            "itemStatusCount": obj.get("itemStatusCount"),
            "itemStatusCountArchived": obj.get("itemStatusCountArchived"),
            "permissions": dict((_k, _v) for _k, _v in obj.get("permissions").items()) if obj.get("permissions") is not None else None,
            "statuses": dict(
                (_k, Status.from_dict(_v))
                for _k, _v in obj["statuses"].items()
            )
            if obj.get("statuses") is not None
            else None,
            "views": dict(
                (_k, View.from_dict(_v))
                for _k, _v in obj["views"].items()
            )
            if obj.get("views") is not None
            else None,
            "children": [WorkspaceEmbedRelation.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "currentPermission": obj.get("currentPermission"),
            "parents": [WorkspaceEmbedRelation.from_dict(_item) for _item in obj["parents"]] if obj.get("parents") is not None else None,
            "workspaceGroup": WorkspaceEmbedWorkspaceGroup.from_dict(obj["workspaceGroup"]) if obj.get("workspaceGroup") is not None else None
        })
        return _obj


