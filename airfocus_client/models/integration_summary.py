# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from airfocus_client.models.integration_capabilities import IntegrationCapabilities
from airfocus_client.models.integration_sync_state import IntegrationSyncState
from typing import Optional, Set
from typing_extensions import Self

class IntegrationSummary(BaseModel):
    """
    IntegrationSummary
    """ # noqa: E501
    capabilities: IntegrationCapabilities
    created_at: datetime = Field(alias="createdAt")
    enabled: StrictBool
    id: StrictStr
    settings: Optional[Any]
    type_id: StrictStr = Field(alias="typeId")
    last_sync_at: Optional[datetime] = Field(default=None, alias="lastSyncAt")
    last_sync_state: Optional[IntegrationSyncState] = Field(default=None, alias="lastSyncState")
    __properties: ClassVar[List[str]] = ["capabilities", "createdAt", "enabled", "id", "settings", "typeId", "lastSyncAt", "lastSyncState"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntegrationSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of capabilities
        if self.capabilities:
            _dict['capabilities'] = self.capabilities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_sync_state
        if self.last_sync_state:
            _dict['lastSyncState'] = self.last_sync_state.to_dict()
        # set to None if settings (nullable) is None
        # and model_fields_set contains the field
        if self.settings is None and "settings" in self.model_fields_set:
            _dict['settings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntegrationSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capabilities": IntegrationCapabilities.from_dict(obj["capabilities"]) if obj.get("capabilities") is not None else None,
            "createdAt": obj.get("createdAt"),
            "enabled": obj.get("enabled"),
            "id": obj.get("id"),
            "settings": obj.get("settings"),
            "typeId": obj.get("typeId"),
            "lastSyncAt": obj.get("lastSyncAt"),
            "lastSyncState": IntegrationSyncState.from_dict(obj["lastSyncState"]) if obj.get("lastSyncState") is not None else None
        })
        return _obj


