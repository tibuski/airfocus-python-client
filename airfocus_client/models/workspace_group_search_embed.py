# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from airfocus_client.models.permission import Permission
from airfocus_client.models.workspace import Workspace
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceGroupSearchEmbed(BaseModel):
    """
    An object embedded into each workspace-group when searching workspaces.
    """ # noqa: E501
    permissions: Dict[str, Permission] = Field(description="All explicitly defined permissions for all users for this workspace-group.")
    current_permission: Optional[Permission] = Field(default=None, description="Actual permission of the current user for this workspace-group.", alias="currentPermission")
    workspace_ids: Optional[List[StrictStr]] = Field(default=None, description="List of workspace-ids which belongs to this workspace-group.", alias="workspaceIds")
    workspaces: Optional[List[Workspace]] = Field(default=None, description="Deprecated and will be removed. Use 'workspaceIds' instead, and a followup workspace-search request.")
    __properties: ClassVar[List[str]] = ["permissions", "currentPermission", "workspaceIds", "workspaces"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceGroupSearchEmbed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in workspaces (list)
        _items = []
        if self.workspaces:
            for _item_workspaces in self.workspaces:
                if _item_workspaces:
                    _items.append(_item_workspaces.to_dict())
            _dict['workspaces'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceGroupSearchEmbed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "permissions": dict((_k, _v) for _k, _v in obj.get("permissions").items()) if obj.get("permissions") is not None else None,
            "currentPermission": obj.get("currentPermission"),
            "workspaceIds": obj.get("workspaceIds"),
            "workspaces": [Workspace.from_dict(_item) for _item in obj["workspaces"]] if obj.get("workspaces") is not None else None
        })
        return _obj


