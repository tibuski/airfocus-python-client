# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from airfocus_client.models.item_constraint import ItemConstraint
from airfocus_client.models.item_embed_app import ItemEmbedApp
from airfocus_client.models.item_embed_integration import ItemEmbedIntegration
from airfocus_client.models.item_embed_progress import ItemEmbedProgress
from airfocus_client.models.item_type import ItemType
from airfocus_client.models.relative_item_info import RelativeItemInfo
from typing import Optional, Set
from typing_extensions import Self

class ItemEmbed(BaseModel):
    """
    ItemEmbed
    """ # noqa: E501
    apps: Dict[str, ItemEmbedApp]
    attachment_count: StrictInt = Field(alias="attachmentCount")
    comment_count: StrictInt = Field(alias="commentCount")
    link_count: StrictInt = Field(alias="linkCount")
    progress: ItemEmbedProgress
    watched: StrictBool
    alias: Optional[StrictStr] = None
    children: Optional[List[RelativeItemInfo]] = None
    constraints: Optional[List[ItemConstraint]] = None
    integration: Optional[ItemEmbedIntegration] = None
    parents: Optional[List[RelativeItemInfo]] = None
    workspace_item_type: Optional[ItemType] = Field(default=None, alias="workspaceItemType")
    __properties: ClassVar[List[str]] = ["apps", "attachmentCount", "commentCount", "linkCount", "progress", "watched", "alias", "children", "constraints", "integration", "parents", "workspaceItemType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemEmbed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in apps (dict)
        _field_dict = {}
        if self.apps:
            for _key_apps in self.apps:
                if self.apps[_key_apps]:
                    _field_dict[_key_apps] = self.apps[_key_apps].to_dict()
            _dict['apps'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of progress
        if self.progress:
            _dict['progress'] = self.progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in constraints (list)
        _items = []
        if self.constraints:
            for _item_constraints in self.constraints:
                if _item_constraints:
                    _items.append(_item_constraints.to_dict())
            _dict['constraints'] = _items
        # override the default output from pydantic by calling `to_dict()` of integration
        if self.integration:
            _dict['integration'] = self.integration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parents (list)
        _items = []
        if self.parents:
            for _item_parents in self.parents:
                if _item_parents:
                    _items.append(_item_parents.to_dict())
            _dict['parents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemEmbed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apps": dict(
                (_k, ItemEmbedApp.from_dict(_v))
                for _k, _v in obj["apps"].items()
            )
            if obj.get("apps") is not None
            else None,
            "attachmentCount": obj.get("attachmentCount"),
            "commentCount": obj.get("commentCount"),
            "linkCount": obj.get("linkCount"),
            "progress": ItemEmbedProgress.from_dict(obj["progress"]) if obj.get("progress") is not None else None,
            "watched": obj.get("watched"),
            "alias": obj.get("alias"),
            "children": [RelativeItemInfo.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "constraints": [ItemConstraint.from_dict(_item) for _item in obj["constraints"]] if obj.get("constraints") is not None else None,
            "integration": ItemEmbedIntegration.from_dict(obj["integration"]) if obj.get("integration") is not None else None,
            "parents": [RelativeItemInfo.from_dict(_item) for _item in obj["parents"]] if obj.get("parents") is not None else None,
            "workspaceItemType": obj.get("workspaceItemType")
        })
        return _obj


