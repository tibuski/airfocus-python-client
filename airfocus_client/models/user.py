# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from airfocus_client.models.role import Role
from airfocus_client.models.user_state import UserState
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    created_at: datetime = Field(alias="createdAt")
    disabled: StrictBool
    email: StrictStr
    email_verified: StrictBool = Field(alias="emailVerified")
    full_name: StrictStr = Field(alias="fullName")
    is_team_creator: StrictBool = Field(alias="isTeamCreator")
    role: Role
    state: UserState
    team_id: StrictStr = Field(alias="teamId")
    updated_at: datetime = Field(alias="updatedAt")
    user_id: StrictStr = Field(alias="userId")
    avatar_attachment_id: Optional[StrictStr] = Field(default=None, alias="avatarAttachmentId")
    last_seen_at: Optional[datetime] = Field(default=None, alias="lastSeenAt")
    __properties: ClassVar[List[str]] = ["createdAt", "disabled", "email", "emailVerified", "fullName", "isTeamCreator", "role", "state", "teamId", "updatedAt", "userId", "avatarAttachmentId", "lastSeenAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "disabled": obj.get("disabled"),
            "email": obj.get("email"),
            "emailVerified": obj.get("emailVerified"),
            "fullName": obj.get("fullName"),
            "isTeamCreator": obj.get("isTeamCreator"),
            "role": obj.get("role"),
            "state": UserState.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "teamId": obj.get("teamId"),
            "updatedAt": obj.get("updatedAt"),
            "userId": obj.get("userId"),
            "avatarAttachmentId": obj.get("avatarAttachmentId"),
            "lastSeenAt": obj.get("lastSeenAt")
        })
        return _obj


