# coding: utf-8

"""
    airfocus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0-beta.37.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from airfocus_client.models.json_patch_add import JsonPatchAdd
from airfocus_client.models.json_patch_copy import JsonPatchCopy
from airfocus_client.models.json_patch_move import JsonPatchMove
from airfocus_client.models.json_patch_remove import JsonPatchRemove
from airfocus_client.models.json_patch_replace import JsonPatchReplace
from airfocus_client.models.json_patch_test import JsonPatchTest
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

JSONPATCHOPERATION_ONE_OF_SCHEMAS = ["JsonPatchAdd", "JsonPatchCopy", "JsonPatchMove", "JsonPatchRemove", "JsonPatchReplace", "JsonPatchTest"]

class JsonPatchOperation(BaseModel):
    """
    JsonPatchOperation
    """
    # data type: JsonPatchAdd
    oneof_schema_1_validator: Optional[JsonPatchAdd] = None
    # data type: JsonPatchCopy
    oneof_schema_2_validator: Optional[JsonPatchCopy] = None
    # data type: JsonPatchMove
    oneof_schema_3_validator: Optional[JsonPatchMove] = None
    # data type: JsonPatchRemove
    oneof_schema_4_validator: Optional[JsonPatchRemove] = None
    # data type: JsonPatchReplace
    oneof_schema_5_validator: Optional[JsonPatchReplace] = None
    # data type: JsonPatchTest
    oneof_schema_6_validator: Optional[JsonPatchTest] = None
    actual_instance: Optional[Union[JsonPatchAdd, JsonPatchCopy, JsonPatchMove, JsonPatchRemove, JsonPatchReplace, JsonPatchTest]] = None
    one_of_schemas: Set[str] = { "JsonPatchAdd", "JsonPatchCopy", "JsonPatchMove", "JsonPatchRemove", "JsonPatchReplace", "JsonPatchTest" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = JsonPatchOperation.model_construct()
        error_messages = []
        match = 0
        # validate data type: JsonPatchAdd
        if not isinstance(v, JsonPatchAdd):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JsonPatchAdd`")
        else:
            match += 1
        # validate data type: JsonPatchCopy
        if not isinstance(v, JsonPatchCopy):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JsonPatchCopy`")
        else:
            match += 1
        # validate data type: JsonPatchMove
        if not isinstance(v, JsonPatchMove):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JsonPatchMove`")
        else:
            match += 1
        # validate data type: JsonPatchRemove
        if not isinstance(v, JsonPatchRemove):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JsonPatchRemove`")
        else:
            match += 1
        # validate data type: JsonPatchReplace
        if not isinstance(v, JsonPatchReplace):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JsonPatchReplace`")
        else:
            match += 1
        # validate data type: JsonPatchTest
        if not isinstance(v, JsonPatchTest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JsonPatchTest`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in JsonPatchOperation with oneOf schemas: JsonPatchAdd, JsonPatchCopy, JsonPatchMove, JsonPatchRemove, JsonPatchReplace, JsonPatchTest. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in JsonPatchOperation with oneOf schemas: JsonPatchAdd, JsonPatchCopy, JsonPatchMove, JsonPatchRemove, JsonPatchReplace, JsonPatchTest. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into JsonPatchAdd
        try:
            instance.actual_instance = JsonPatchAdd.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into JsonPatchCopy
        try:
            instance.actual_instance = JsonPatchCopy.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into JsonPatchMove
        try:
            instance.actual_instance = JsonPatchMove.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into JsonPatchRemove
        try:
            instance.actual_instance = JsonPatchRemove.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into JsonPatchReplace
        try:
            instance.actual_instance = JsonPatchReplace.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into JsonPatchTest
        try:
            instance.actual_instance = JsonPatchTest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into JsonPatchOperation with oneOf schemas: JsonPatchAdd, JsonPatchCopy, JsonPatchMove, JsonPatchRemove, JsonPatchReplace, JsonPatchTest. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into JsonPatchOperation with oneOf schemas: JsonPatchAdd, JsonPatchCopy, JsonPatchMove, JsonPatchRemove, JsonPatchReplace, JsonPatchTest. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], JsonPatchAdd, JsonPatchCopy, JsonPatchMove, JsonPatchRemove, JsonPatchReplace, JsonPatchTest]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


